This folder contains the scripts and other files required for performing the ensemble of models.

1. predict_boxes.py: This script was made to evaluate our Adaptive Weights based ensemble model. In this script we feed the validation images to each of the individual model -> collect their detection outputs -> combine them into a single list so that we can send it to ensemble.py file -> feed the combined detection list to ensemble.py -> ensemble.py performs the Adaptive Weights based ensembling and returns the final detection output in a result.csv file which is then used by localization_evaluation.py file to find mAP of our model.
Command: python predict_boxes.py

2. ensemble.py: this file takes detections from multiple models like ssd, ssd-subset and fr-cnn and generates the ensemble output. It contains the logic of our Adaptive Weights based model ensembling technique. This file is used in predict_boxes.py and read_detections_from_file.py scripts but it can also be called explicitly to test how it generates the ensemble output.
Command: python ensemble.py

3. read_detections_from_file.py: we run the "predict_boxes.py" script(which takes almost a day to run) only once and store the output into numpy files so that they can be read later on by "read_detections_from_file.py" script. This was done to prevent running "predict_boxes.py" script again and again. It reads the detections generated by predict_boxes.py and feeds it to ensemble.py to get the final ensembled detection output.
Command: read_detections_from_file.py

4. tune_weights_ensemble.py: this script tunes the weight parameters that are assigned to each individual model in ensemble script. parameters are tuned on the first half of validation set and tested on the other half.
Command:python tune_weights_ensemble.py

5. dets_numpy: the detections generated by all of the three models in predict_boxes.py files are stored in this folder and later retrieved from this folder whenever required and thus saves computation time.

6. tuning_results: when tuning the weight parameters of individual models, their results for each weight value combination is stored in this folder and at the end the best weight combination among them is selected.